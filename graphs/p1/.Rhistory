setwd("~/Desktop/third_year/graphs/p1")
Show_your_tools <- read.delim("~/Desktop/third_year/graphs/p1/Show_your_tools.txt")
View(Show_your_tools)
plot(Show_your_tools)
plot(Show_your_tools$x,Show_your_tools$y)
barplot(Show_your_tools$z)
barplot(count(Show_your_tools$z))
View(Show_your_tools)
hist(Show_your_tools$z)
plot(Show_your_tools$z)
plot(Show_your_tools$z,col="forestgreen")
plot(Show_your_tools$x,Show_your_tools$y)
plot(Show_your_tools$z,col="forestgreen")
plot(Show_your_tools$x,Show_your_tools$y)
plot(Show_your_tools$z,col="forestgreen")
plot(Show_your_tools$x,Show_your_tools$y,xlab = "X",ylab = "Y")
plot(Show_your_tools$z,col="forestgreen")
plot(Show_your_tools$z,col="olivegreen")
plot(Show_your_tools$z,col="olive")
plot(Show_your_tools$z,col="coral")
plot(Show_your_tools$z,col="coral2")
plot(Show_your_tools$z,col="coral4")
plot(Show_your_tools$z,col="coral3")
plot(Show_your_tools$z,col="coral2")
ggplot2
library("ggplot2")
############## Slide 8 ##############
#dotplot x vs y and barplot of z
data <- read.table("data.txt", header = TRUE, sep = "\t")
############## Slide 8 ##############
#dotplot x vs y and barplot of z
data <- read.table("Show_your_tools.txt", header = TRUE, sep = "\t")
plot(data$z,col="coral2")
plot(data$x,data$y,xlab = "X",ylab = "Y")
############## Slide 8 ##############
ggplot(data, aes(x,y)+geom_dotplot())
############## Slide 8 ##############
ggplot(data, aes(x=x,y=y)+geom_dotplot())
############## Slide 8 ##############
p<-ggplot(ToothGrowth, aes(x=x, y=y)) +
geom_dotplot(binaxis='y', stackdir='center')
p
############## Slide 8 ##############
ggplot(ToothGrowth, aes(x=x, y=y)) +
geom_dotplot(binaxis='y', stackdir='center')
############## Slide 8 ##############
ggplot(data, aes(x = x, y = y)) + geom_dotplot()
############## Slide 8 ##############
ggplot(data, aes(x = x, y = y)) + geom_dotplot())
############## Slide 8 ##############
ggplot(data, aes(x,y)) + geom_dotplot())
############## Slide 8 ##############
ggplot(data, aes(x,y)) + geom_dotplot()
install.packages(reshape2)
install.packages(tidyr)
install.packages("tidy")
install.packages("tidyr")
install.packages("reshape2")
############## Slide 8 ##############
ggplot(data) +
geom_point(aes(x =x, y = y))
data <- read.table("p1_data.txt", header = TRUE, sep = "\t")
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
View(data2)
tidyr::gather(
data2,
- ID,
key = "type",
value = "value"
)
tidy_data<-tidyr::gather(
data2,
- ID,
key = "type",
value = "value"
)
View(tidy_data)
tidy_data<-tidyr::gather(
data2,
- ID,
key = "Group",
value = "value"
)
tidy_data<-tidyr::gather(
data2,
- ID,
key = "Group",
value = "value"
)
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
tidy_data<-tidyr::gather(
data2,
- Group,
key = "ID",
value = "value"
)
tidy_data<-tidyr::gather(
data2,
- Group,
key = "ID",
value = "value"
)
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
tidy_data<-tidyr::gather(
data2,
- Group,
key = "ID",
value = "value"
)
View(tidy_data)
tidy_data<-tidyr::gather(
data2,
- ID,
key = "Group",
value = "values"
)
tidy_data<-tidyr::gather(
data2,
- ID,
key = "Heighth","Width","Depth",
value = "values"
)
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
tidy_data<-tidyr::gather(
data2,
- ID,
key = "Heighth","Width","Depth",
value = "values"
)
tidy_data<-tidyr::gather(
data2,
- ID,Group,
key = "scores",
value = "values"
)
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
tidy_data<-tidyr::gather(
data2,
- ID,Group,
key = "scores",
value = "values"
)
tidy_data<-tidyr::gather(
data2,
- c(ID,Group),
key = "values",
value = "scores"
)
data2 <- read.table("p1_data.txt", header = TRUE, sep = "\t")
tidy_data<-tidyr::gather(
data2,
- c(ID,Group),
key = "values",
value = "scores"
)
View(tidy_data)
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4)
# install.packages("prettydoc")
# Run install.packages("ggplot2") if ggplot2 is not yet installed
library(ggplot2)
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg)) +
geom_point()
table(mtcars$cyl)
# First we check the class of cyl
class(mtcars$cyl)
# First we check the class of cyl
class(mtcars$cyl)
# Because it is numeric, let's make cyl a factor so that we represent it as a categorical variable.
# We create a new variable in the dataframe, cyl_f, that is cyl converted to factor
mtcars$cyl_f <- factor(mtcars$cyl)
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, colour = cyl_f)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, shape = cyl_f)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, colour = qsec)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, shape = qsec)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, colour = qsec)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, size = cyl_f)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, colour = qsec)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, shape = qsec)) +
geom_point()
ggplot(data = mtcars, mapping = aes(x = cyl)) +
geom_bar()
ggplot(data = mtcars, mapping = aes(x = cyl), col=cyl) +
geom_bar()
# Let's create the data frame
counts_by_cyl_data_frame <- as.data.frame(table(mtcars$cyl))
names(counts_by_cyl_data_frame) <- c("cyl", "number_of_cars")
View(counts_by_cyl_data_frame)
ggplot(data = counts_by_cyl_data_frame, mapping = aes(x = cyl, y =
number_of_cars)) +
geom_col()
# The same as
ggplot(data = counts_by_cyl_data_frame, mapping = aes(x = cyl, y = number_of_cars)) +
geom_bar(stat = "identity")
# First we make am factor, and we can change the 0/1 notation for a more informative notation: automatic/manual
mtcars$am_f <- factor(mtcars$am, levels = c(0, 1), labels =
c("automatic","manual"))
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar()
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "dodge")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "equal")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "stack")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "height")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "fill")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "jitter")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "identity")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "stack")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "fill")
ggplot(data = iris, mapping = aes(x = Sepal.Width)) +
geom_histogram(binwidth = 0.1)
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1)
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)
iris$Petal.Type[iris$Petal.Length >= 4 ] <- "Long"
iris$Petal.Type[iris$Petal.Length < 4 ] <- "Short"
gL<-iris$Petal.Type[iris$Petal.Length >= 4 ] <- "Long"
gS<-iris$Petal.Type[iris$Petal.Length < 4 ] <- "Short"
ggplot(data = iris, mapping = aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)
View(iris)
ggplot(data = iris, mapping = aes(x = Petal.Type, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)
ggplot(data = iris, mapping = aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Petal.Type ~ .)
ggplot(data = iris, mapping = aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Petal.Type ~ Species)
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "stack")
ggplot(data = mtcars, mapping = aes(x = cyl, fill = am_f)) +
geom_bar(position = "fill")
ggplot(data = iris, mapping = aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .) +
scale_fill_manual(values = c("darkorange", "darkgray", "black"))
# We save the common part of the plot in a variable and then we can add  more components with the "+" sign
p <- ggplot(data = iris, mapping = aes(x = Sepal.Width, fill =
Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)
p
# Option A:
p + scale_fill_manual(values = c("darkorange", "darkgray", "black"),
name = "Species name") +
scale_x_continuous(name = "Sepal width") +
ggtitle("Iris sepal variation")
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_classic()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
scale_fill_brewer()
pb<-ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_classic()
pb+scale_fill_brewer()
pb<-ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
pb+scale_fill_brewer()
pb<-ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +scale_colour_brewer(type = "seq", palette = 1, direction = 1,
aesthetics = "colour")
pb
pb + scale_colour_brewer(type = "seq", palette = 1, direction = 1,
aesthetics = "colour")
pb + scale_colour_brewer(type = "seq", palette = 1, direction =1)
pb + scale_colour_brewer()
pb<-ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() + scale_colour_brewer()
pb
geom_point((colour=aes(x = Sepal.Width, y = Sepal.Length)) + scale_colour_brewer()
pb
pb<-ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point(colour=aes(x = Sepal.Width, y = Sepal.Length)) + scale_colour_brewer()
pb
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_bw()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_void()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_dark()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
theme_void()
pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
pb
pB
pB + scale_colour_brewer()
pB + scale_fill_brewer()
pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length, fill=Species)) +
geom_point()
pB
pB + scale_fill_brewer()
pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, fill =
Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length, fill=Species)) +
pB
pb <- ggplot(data = iris, mapping = aes(x = Sepal.Width, fill =
Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length, fill=Species)) +
pb
PB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, fill =
Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)pB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length, fill=Species)) +
PB <- ggplot(data = iris, mapping = aes(x = Sepal.Width, fill =
Species)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Species ~ .)
PB
PB + scale_fill_brewer()
PB + scale_fill_brewer() + theme_void()
PB + scale_fill_brewer() + theme_classic()
PB + scale_fill_viridis_d() + theme_classic()
PB + scale_fill_viridis_d() + theme_classic() +substitute("Subtitle")+tag("Tag")
PB + scale_fill_viridis_d() + theme_classic() +substitutle("Subtitle")+tag("Tag")
PB + scale_fill_viridis_d() + theme_classic() + lab(substitutle="Subtitle",tag="Tag",caption="Caption")
PB + scale_fill_viridis_d() + theme_classic() + labs(substitutle="Subtitle",tag="Tag",caption="Caption")
PB + scale_fill_viridis_d() + theme_classic() + labs(subtitle="Subtitle",tag="Tag",caption="Caption")
p <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y =
Sepal.Length)) + geom_point()
ggsave(filename = "plot.png", plot = p, width = 6, height = 4) # in inches by default
png(filename = "plot.png", width = 600, height = 400, res = 150) # In pixels by default
p
dev.off()
png(filename = "plot.png", width = 600, height = 400, res = 150) # In pixels by default
p
dev.off()
svg(filename = "plot.svg") # In pixels by default
p
dev.off()
svg(filename = "plot.svg") # In pixels by default
p
dev.off()
svg(filename = "plot.svg") # In pixels by default
p
dev.off()
png(filename = "plot.png", width = 600, height = 400, res = 150) # In pixels by default
p
dev.off()
View(economics)
ggplot(data=economics, aes=(x=date, y=unemploy))
ggplot(data=economics, aes=(x=date, y=unemploy))
ggplot(data=economics, aes(x=date, y=unemploy))
ggplot(data=economics, aes(x=date, y=unemploy))+geom_line()
ggplot(data=economics, aes(x=date, y=unemploy))+geom_line()+xlab("Date_modified")+ylab("Unemploy_modified")+ggtitle("Title_last_exercise")
p6<-ggplot(data=economics, aes(x=date, y=unemploy))+geom_line()+xlab("Date_modified")+ylab("Unemploy_modified")+ggtitle("Title_last_exercise")
svg(filename = "last_ex_plot.svg") # In pixels by default
p6
dev.off()
