options(htmltools.dir.version = FALSE)
# Animations: https://github.com/daneden/animate.css#animations
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.width = 4.5, fig.height = 3.5, fig.show = 'hold', message = FALSE)
library(ggplot2)
# pagedown::chrome_print("T2.1_slides.html")
# Package for slides
# remotes::install_github('yihui/xaringan')
ggplot(data = data,  mapping = aes(x = var1, y = var2, colour = var3)) +
layer(geom = "point", stat = "identity", position = "identity")
options(htmltools.dir.version = FALSE)
# Animations: https://github.com/daneden/animate.css#animations
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.width = 4.5, fig.height = 3.5, fig.show = 'hold', message = FALSE)
library(ggplot2)
# pagedown::chrome_print("T2.1_slides.html")
# Package for slides
# remotes::install_github('yihui/xaringan')
value <- 2
value + 3
ggplot(data = data,  mapping = aes(x = var1, y = var2, colour = var3)) +
layer(geom = "point", stat = "identity", position = "identity")
library(ggplot2)
value <- 2
value + 3
if (TRUE) {
{{ message("Very important!") }}
}
ggplot(data = data,  mapping = aes(x = var1, y = var2, colour = var3)) +
layer(geom = "point", stat = "identity", position = "identity")
head(iris, 5)
ggplot(data = iris)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length))
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
# Default data and mapping used by the layer
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
# Answer
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length,size=Sepal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length,alpha=Sepal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length,colour=Sepal.Width)) +
geom_point()
# Correct
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point()
# Not recommended
ggplot(iris, aes(x = Sepal.Width, y = iris$Sepal.Length)) + geom_point()
SL_var <- iris$Sepal.Length
ggplot(iris, aes(x = Sepal.Width, y = SL_var)) + geom_point()
# Correct
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point(size=Sepal.Widhth)
# Correct
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point(size=Sepal.Width)
# Correct
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point()
ggplot(mpg) +
geom_point(aes(mpg$displ, mpg$hwy))
ggplot(mpg,aes(displ, hwy)) +
geom_point()
ggplot(data = mpg) +
geom_point(mapping = aes(y = hwy, x = cty)) +
geom_smooth()
ggplot(data = mpg,mapping = aes(y = hwy, x = cty)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
p<-ggplot(diamonds, aes(carat, price)) +geom_point
p<-ggplot(diamonds, aes(carat, price)) +geom_point()
p+  geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(data = mpg,aes(y = hwy, x = cty)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(diamonds, aes(carat, price,col=blue)) +
geom_point(aes(log(brainwt), log(bodywt),col=red), data = msleep)
ggplot(diamonds, aes(carat, price,col=blue)) +
geom_point(aes(log(brainwt), log(bodywt),col=black), data = msleep)
ggplot(diamonds, aes(carat, price,col=blue)) +
geom_point(aes(log(brainwt), log(bodywt),col=log(bodywt)), data = msleep)
ggplot(diamonds, aes(carat, price,col=blue)) +
geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) + geom_point()
ggplot()+ geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) +
geom_bar(colour = "white")
ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) +
geom_bar()
colour = "white"
ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) +
geom_bar(colour = "white")
b <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(gear)))
b + geom_bar() + labs(title="stack") # default bar position
b + geom_bar(position = "fill") + labs(title="fill")
b + geom_bar(position = "dodge") + labs(title="dodge")
p + geom_point(position = "fill") + labs(title = "jitter")
jitter
p <- ggplot(mtcars, aes(x = factor(cyl), y = mpg, colour = factor(cyl)))
p + geom_point(position = "jitter") + labs(title = "jitter")
p + geom_point(position = "fill") + labs(title = "jitter")
p + geom_point(position = "stack") + labs(title = "jitter")
b + geom_bar(position = "jitter") + labs(title="dodge")
# Represent mpg vs. hp and annotate a subset of points with a rectangle
p_overview <- ggplot(mtcars, aes(hp, mpg)) +
annotate(geom = "rect", xmin = 50, ymin = 25, xmax = 100, ymax = 35, fill = "red", alpha = 0.3 )+
geom_point() +
labs(x = NULL, y = NULL)
# Represent the subset of points
p_subset <- ggplot(mtcars[mtcars$hp <100 & mtcars$mpg >25,], aes(hp, mpg)) +
geom_point()
# Add an inset with the full data
p_subset +
annotation_custom(ggplotGrob(p_overview), xmin = 75, ymin = 30)
p <- ggplot(mtcars, aes(hp, mpg)) + geom_point()
p +
# Add red cercles
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7) +
# Draw an arrow
geom_segment(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(xend = hp + 30, yend = mpg + 3),
arrow = arrow(ends = "first", type = "closed", angle = 15, length = unit(0.5,"cm")),
colour = "gray50") +
# Add text
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
ggplot(iris, aes(x = Species, y = Petal.Width, colour = Species)) +
# Show data
geom_jitter(show.legend = FALSE) +
# Summarize
geom_boxplot(fill = NA, show.legend = FALSE) +
# Annotate
geom_hline(yintercept = mean(iris$Petal.Width), alpha = 0.5)
options(htmltools.dir.version = FALSE)
# Animations: https://github.com/daneden/animate.css#animations
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, fig.width = 4.5, fig.height = 3.5, fig.show = 'hold', message = FALSE)
library(ggplot2)
# pagedown::chrome_print("T2.1_slides.html")
# Package for slides
# remotes::install_github('yihui/xaringan')
value <- 2
value + 3
head(iris, 5)
ggplot(data = iris)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length))
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
# Position
ggplot() +
geom_segment(data = data.frame(x = c(0, 0.5),
xend = c(1, 0.5),
y = c(0.5, 0),
yend = c(0.5, 1)),
aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = grid::unit(12, "pt")), size = .75) +
annotate(geom = "text", x = 0.5, y = 1, label = "y", size = 6, vjust = 1, hjust = 2.5) +
annotate(geom = "text", x = 1, y = 0.5, label = "x", size = 6, vjust = 2, hjust = 1) +
theme_void() +
labs(title = "Position")
# Colour
ggplot() +
geom_tile(data = data.frame(x = 0.15 + .2333*(0:3)),
aes(x, y = .5, fill = factor(x)), width = .2, height = .6) +
scale_fill_viridis_d(guide = "none") +
theme_void() +
labs(title = "Colour")
# Shape
ggplot() +
geom_point(data = data.frame(x = (.5 + 0:3)/4),
aes(x, y = .5, shape = factor(x)), size = 8, fill = "grey80", show.legend = FALSE) +
scale_shape_manual(values = 21:24) +
coord_cartesian(xlim = c(0,1)) +
theme_void() +
labs(title = "Shape")
# Line type
ggplot() +
geom_segment(data = data.frame(x = rep(0.05, 4),
xend = rep(0.95, 4),
y = (1.5 + 0:3)/6,
yend = (1.5 + 0:3)/6,
linetype = 4:1),
aes(x = x, y = y, xend = xend, yend = yend, linetype = linetype), size = 1) +
scale_linetype_identity() +
theme_void() +
labs(title = "Line type")
# Transparency
ggplot(data = data.frame(x = 0.15 + .2333*(0:3), transp = c(0.25, 0.5, 0.75, 1))) +
geom_point(aes(x, y = .5), shape = 4) +
geom_tile(aes(x, y = .5, alpha = transp ), width = .2, height = .6, fill = "#F1605DFF") +
scale_alpha_identity() +
theme_void() +
labs(title = "Transparency")
# Size
ggplot() +
geom_point(data = data.frame(x = (.5 + 0:3)/4),
aes(x, y = .5, size = factor(x)), shape = 21, fill = "grey80", show.legend = FALSE) +
scale_size_manual(values = c(2, 5, 8, 11)) +
coord_cartesian(xlim = c(0,1)) +
theme_void() +
labs(title = "Size")
# Adapted from: https://serialmentor.com/dataviz/aesthetic-mapping.html
# Answer
# Default data and mapping used by the layer
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point()
# No default defined, data and mapping in layer
ggplot() +
geom_point(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length))
# Answer
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length,alpha=Sepal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length,colour=Sepal.Width)) +
geom_point()
p <- ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Sepal.Length))
# Override data in layer
small_iris <- iris[iris$Species %in% "setosa", ]
p + geom_point(data = small_iris)
# Override mapping in layer (or remove y = NULL or add colour = Species)
p + geom_point(aes(y = Petal.Width))
# Correct
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) + geom_point()
# Not recommended #brong
ggplot(iris, aes(x = Sepal.Width, y = iris$Sepal.Length)) + geom_point()
SL_var <- iris$Sepal.Length
ggplot(iris, aes(x = Sepal.Width, y = SL_var)) + geom_point()
# Answer
ggplot(mpg,aes(displ, hwy)) +
geom_point()
ggplot(data = mpg,aes(y = hwy, x = cty)) +
geom_point() +
geom_smooth()
ggplot()+ geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
p <- ggplot(iris, aes(Sepal.Width, Sepal.Length))
p + geom_point(aes(colour = Species)) # Map Species to colour
p + geom_point(aes(colour = "darkblue")) # Map "darkblue" to colour
p + geom_point(colour = "darkblue") # Set colour to "darkblue"
ggplot(nlme::Oxboys, aes(age, height)) +
geom_line()
ggplot(nlme::Oxboys, aes(age, height, group = Subject)) + # or colour = Subject
geom_line()
ggplot(nlme::Oxboys, aes(age, height, group = Subject)) +
geom_line() + geom_smooth(aes(group = Subject))
ggplot(nlme::Oxboys, aes(age, height, group = Subject)) +
geom_line() + geom_smooth(aes(group = 1)) # o group = NULL
ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) +
geom_bar(colour = "white")
simple_data <- data.frame(
var1 = c(5, 2, 7),
var2 = c(9, 6, 3),
text = c("A", "B", "C")
)
p <- ggplot(data = simple_data, mapping = aes(x = var1, y = var2, label = text)) +
labs(x = NULL, y = NULL)
p + geom_point() + labs(title = "geom_point")
p + geom_col() + labs(title = "geom_col")
p + geom_text() + labs(title = "geom_text")
p + geom_tile() + labs(title = "geom_tile")
p + geom_line() + labs(title = "geom_line")
p + geom_path() + labs(title = "geom_path")
p + geom_polygon() + labs(title = "geom_polygon")
p + geom_area() + labs(title = "geom_area")
ggplot(diamonds, aes(carat)) + geom_histogram(aes(y=..count..), binwidth = 0.1)
ggplot(diamonds, aes(carat)) + geom_histogram(aes(y=..density..), binwidth = 0.1)
p <- ggplot(mtcars, aes(x = factor(cyl)))
p + geom_bar() + labs(title = "count") # uses stat = "bin" by default
p + geom_bar(aes(y = ..count../sum(..count..))) +
labs(title = "count/sum(count)")
# p + geom_bar(aes(y = stat(count/sum(count))))
p + geom_bar(aes(y = ..prop.., group = 1)) + labs(title = "prop")
p <- ggplot(mtcars, aes(x = factor(cyl), y = mpg, colour = factor(cyl)))
p + geom_point() + labs(title = "identity") # default point position
p + geom_point(position = "jitter") + labs(title = "jitter")
p + geom_point(position = position_nudge(x = 0.3)) + labs(title = "nudge")
b <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(gear)))
b + geom_bar() + labs(title="stack") # default bar position
b + geom_bar(position = "fill") + labs(title="fill")
b + geom_bar(position = "dodge") + labs(title="dodge")
geom_examples <- data.frame(
fun = c("geom_point","geom_line","geom_ribbon","geom_col","geom_text", "stat_ecdf"),
aes = c("x, y, alpha, colour, size, shape...", "x, y, linetype...", "x, ymin, ymax...", "x, y, ..." ,"x, y, label, angle, fontface...", "x, colour, linetype"),
geom = c("point", "line", "ribbon", "col", "text", "step"),
stat = c("identity", "identity", "identity", "identity", "identity", "ecdf"),
position = c("identity", "identity" , "identity", "stack", "identity", "identity")
)
knitr::kable(geom_examples, format = "markdown")
ggplot(iris, aes(x = Species, y = Petal.Width, colour = Species)) +
# Show data
geom_jitter(show.legend = FALSE) +
# Summarize
geom_boxplot(fill = NA, show.legend = FALSE) +
# Annotate
geom_hline(yintercept = mean(iris$Petal.Width), alpha = 0.5)
p <- ggplot(mtcars, aes(hp, mpg)) + geom_point()
p +
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7) +
geom_segment(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(xend = hp + 30, yend = mpg + 3),
arrow = arrow(ends = "first", type = "closed", angle = 15, length = unit(0.5,"cm")),
colour = "gray50") +
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
# Represent mpg vs. hp and annotate a subset of points with a rectangle
p_overview <- ggplot(mtcars, aes(hp, mpg)) +
annotate(geom = "rect", xmin = 50, ymin = 25, xmax = 100, ymax = 35, fill = "red", alpha = 0.3 )+
geom_point() +
labs(x = NULL, y = NULL)
# Represent the subset of points
p_subset <- ggplot(mtcars[mtcars$hp <100 & mtcars$mpg >25,], aes(hp, mpg)) +
geom_point()
# Add an inset with the full data
p_subset +
annotation_custom(ggplotGrob(p_overview), xmin = 75, ymin = 30)
# answer
ggplot(mtcars, aes(x = mpg, y = wt, shape = factor(gear))) +
geom_point() +
scale_y_continuous(name = "Weight", breaks = c(2.5,5)) +
scale_x_continuous(name = quote(frac(miles, gallon))) +
scale_shape_discrete(name = "Type", labels = c("III","IV","V"))
p <- ggplot(mtcars, aes(x = mpg, y = wt, shape = factor(gear), colour = factor(gear)))
p + geom_point()
p + geom_point(show.legend = FALSE)
p + geom_point() +
scale_shape_discrete(name = "Type", labels = c("III","IV","V")) +
scale_colour_discrete(name = NULL)
p <- ggplot(mtcars, aes(hp, mpg)) +
geom_point()
p + labs(title = "untransformed")
p + scale_x_continuous(trans = "log10") + labs(title = "log(x)")
p + scale_y_reverse() + labs(title = "rev(x)")
pd <- ggplot(data = iris, aes(Petal.Width, Sepal.Width, colour = Species)) +
geom_point() + labs(x = NULL, y = NULL, colour = NULL)
pd + labs(title = "scale_colour_hue")
pd + scale_colour_brewer(palette = "Set2") + labs(title = "scale_colour_brewer")
pd + scale_colour_viridis_d(option = "E") + labs(title = "scale_colour_viridis_d")
pc <- ggplot(data = iris, aes(Petal.Width, Sepal.Width, colour = Sepal.Length)) +
geom_point() + labs(x = NULL, y = NULL, colour = NULL)
pc + labs(title = "scale_colour_gradient")
pc + scale_colour_distiller(palette = "YlOrRd") + labs(title = "scale_colour_distiller")
pc + scale_colour_viridis_c(option = "A") + labs(title = "scale_colour_viridis_c")
rect <- data.frame(x = 50, y = 50)
line <- data.frame(x = c(1, 200), y = c(100, 1))
base <- ggplot(mapping = aes(x, y)) +
geom_tile(data = rect, aes(width = 50, height = 50)) +
geom_line(data = line) +
labs(x = NULL, y = NULL)
base + labs(title = "coord_cartesian()")
base + coord_polar(theta = "x") + labs(title = "polar(theta = 'x')")
base + coord_polar(theta = "y") + labs(title = "polar(theta = 'y')")
base + coord_flip() + labs(title = "coord_flip()")
base + coord_trans(y = "log10") + labs(title = "coord_trans(y = 'log10')")
base + coord_fixed() + labs(title = "coord_fixed()")
# Adapted examples from ggplot2 book "ggplot2. Elegant Graphics for Data Analysis"
p <- ggplot(data = data.frame(x = c(1,2.5,3,3.5,5,3.5,3,2.5,1),
y = c(3,3.5,5,3.5,3,2.5,1,2.5,3)),
aes(x, y)) +
geom_polygon()
p + labs(title = "Full")
p + coord_cartesian(xlim = c(2,4)) + labs(title = "Image clipped")
# install.packages("maps"); library(maps)
if(require("maps")){
worldmap <- map_data(map = "world")
ggplot(worldmap, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "gray20", colour = "gray92") +
coord_quickmap()
}
p <- ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(cyl),
shape = factor(am))) +
geom_point(show.legend = FALSE) + labs(x = NULL, y = NULL)
p
p + facet_wrap(~factor(cyl)) # 1d ribbon of panels that is wrapped into 2d
p + facet_grid(factor(am) ~ factor(cyl)) # 2d grid of panels defined by variables which form the rows and columns
msleep$name <- factor(msleep$name, levels = msleep$name[order(msleep$sleep_total)])
p <- ggplot(msleep[msleep$vore %in% c("carni","insecti"), ],
aes(x = sleep_total, y = name)) +
geom_point() + scale_x_log10()
p + facet_grid(vore~.)
p + facet_grid(vore~., scales = "free", space = "free")
p <- ggplot(iris, aes(Sepal.Width, Sepal.Length)) + geom_point()
p + theme_classic() + labs(title = "theme_classic()\n")
p + theme(axis.text.y = element_text(colour = "red", size = 12)) + labs(title = "theme(axis.text.y=...)")
p + theme(panel.grid = element_line(linetype = 2, size = 1.5)) + labs(title = "theme(panel.grid=...)")
p <- ggplot(msleep, aes(x = vore, y = sleep_total, colour = vore,
fill = vore)) +
geom_violin(alpha = 0.2, colour = NA) +
geom_jitter(width = 0.3)
# p +
#   theme(legend.position = "top",
#         panel.background = element_rect(fill = "white"),
#         axis.ticks.y = element_blank(),
#         axis.text.x = element_text(angle = 45, vjust = 0.5))
p +
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7)  +
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
p +
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7) +
geom_segment(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(xend = hp + 30, yend = mpg + 3),
arrow = arrow(ends = "first", type = "closed", angle = 15, length = unit(0.5,"cm")),
colour = "gray50") +
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
p <- ggplot(mtcars, aes(hp, mpg)) + geom_point()
p +
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7) +
geom_segment(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(xend = hp + 30, yend = mpg + 3),
arrow = arrow(ends = "first", type = "closed", angle = 15, length = unit(0.5,"cm")),
colour = "gray50") +
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
p +
geom_point(data = mtcars[mtcars$hp > 300 | mtcars$mpg > 30,],
colour = "red", shape = 1, size = 7)  +
geom_text(data = mtcars[mtcars$hp > 100 & mtcars$mpg > 30,],
aes(label = "Economical car"), position = position_nudge(x = 30, y = 3), hjust = 0)
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p <- ggplot(msleep, aes(x = vore, y = sleep_total, colour = vore,
fill = vore)) +
geom_violin(alpha = 0.2, colour = NA) +
geom_jitter(width = 0.3)
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "oldlace"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p <- ggplot(msleep, aes(x = vore, y = sleep_total, colour = vore,
fill = vore)) +
geom_violin(alpha = 0.2, colour = NA) +
geom_jitter(width = 0.3)
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "oldlace"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p <- ggplot(msleep, aes(x = vore, y = sleep_total, colour = vore,
fill = vore)) +
geom_violin(alpha = 0.2, colour = NA) +
geom_jitter(width = 0.3)
p +
theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "oldlace"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "snow"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "whitesmoke"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
```{r, answer}
```{r,answer}
```{r}
#
#
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p <- ggplot(msleep, aes(x = vore, y = sleep_total, colour = vore,
fill = vore)) +
geom_violin(alpha = 0.2, colour = NA) +
geom_jitter(width = 0.3)
p
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "white"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
p +     theme(legend.position = "top",
panel.background = element_rect(fill = "snow"),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5))
sapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)))
sapply(list(runif (10), runif (10)),
function(x) c(min = min(x), mean = mean(x), max = max(x)))
